public class Solution {
    public IList<int> CountSmaller(int[] nums) {
        var result = new List<int>();
        SegmentTree root = null;
        int len = nums.Length;
        for(int i = len-1;i>=0;i--){
            result.Insert(0,0);
            root = InsertAndSearch(root,nums[i],result);
        }

        return result;
    }

    private SegmentTree InsertAndSearch(SegmentTree root,int n,List<int> result){
        if(root == null){
            return new SegmentTree(){val = n,count = 1};
        }else if(root.val == n)
        {
            root.count++;
            root.left = InsertAndSearch(root.left,n,result);
            return root;
        }else if(root.val < n){
            result[0]+=root.count;
            root.right = InsertAndSearch(root.right,n,result);
            return root;
        }else{
            root.count++;
            root.left = InsertAndSearch(root.left,n,result);
            return root;
        }
    }
}

public class SegmentTree{
    public int val;
    public int count;
    public SegmentTree left;
    public SegmentTree right;
}
