/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * interface NestedInteger {
 *
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     int GetInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void SetInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void Add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     IList<NestedInteger> GetList();
 * }
 */
public class Solution {
    public NestedInteger Deserialize(string s) {
        if(s == "")
            return null;
        int len = s.Length;
        var stack = new Stack<NestedInteger>();
        stack.Push(new NestedInteger());
        int b = 1;
        for(int i = 0;i<len;i++){
            if(s[i] == '-'){
                b = -1;
            }else if(s[i] == '['){
                if(s[i+1] == '[')
                    stack.Push(new NestedInteger());
                else if(s[i+1] == ']'){
                    i++;
                }
                else
                    stack.Push(new NestedInteger(0));
                b=1;
            }else if(s[i] == ']'){
                var top = stack.Pop();
                //Console.WriteLine(top.GetInteger());
                stack.Peek().Add(top);
                b=1;
            }else if(s[i] == ','){
                var top = stack.Pop();
                stack.Peek().Add(top);
                if(s[i+1] == '[')
                    stack.Push(new NestedInteger());
                else
                    stack.Push(new NestedInteger(0));
                b=1;
            }else{
                var top =stack.Peek();
                //Console.WriteLine(s[i]);
                top.SetInteger(top.GetInteger()*10+b*(s[i]-'0'));
            }
            //Console.WriteLine(stack.Count);
        }
        return stack.Pop();
    }
}
