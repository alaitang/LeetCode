public class Solution {
    public IList<int[]> KSmallestPairs(int[] nums1, int[] nums2, int k) {
        int len1 = nums1.Length;
        int len2 = nums2.Length;
        var visited = new bool[len1,len2];
        var result = new List<int[]>();
        if(len1 == 0 || len2 == 0)
            return result;
        var list = new List<int[]>();
        list.Add(new int[]{0,0});
        int n = 0;
        while(result.Count < k && list.Any()){
            var top = list[0];
            if(top[0]+1 < len1 && !visited[top[0]+1,top[1]]){
                int index = Insert(list,top[0]+1,top[1],nums1,nums2);
                visited[top[0]+1,top[1]] = true;
                list.Insert(index,new int[]{top[0]+1,top[1]});
            }
            //Console.WriteLine(string.Join(";",list.Select(x=>"("+x[0]+","+x[1]+")")));
            if(top[1]+1 < len2 && !visited[top[0],top[1]+1]){
                int index = Insert(list,top[0],top[1]+1,nums1,nums2);
                visited[top[0],top[1]+1] = true;
                list.Insert(index,new int[]{top[0],top[1]+1});
            }
            //Console.WriteLine(string.Join(";",list.Select(x=>"("+x[0]+","+x[1]+")")));
            //Console.WriteLine("*****************");
            result.Add(new int[]{nums1[list[0][0]],nums2[list[0][1]]});
            list.RemoveAt(0);
        }

        return result;
    }

    private int Insert(List<int[]> list,int i,int j,int[] nums1,int[] nums2){
        if(list.Count == 0){
            return 0;
        }
        int low = 0;
        int high = list.Count-1;
        int sum = nums1[i]+nums2[j];
        while(low < high-1){
            int mid = (low+high)/2;

            int midSum = nums1[list[mid][0]]+nums2[list[mid][1]];

            if(sum < midSum){
                high = mid;
            }else if(sum > midSum){
                low = mid;
            }else{
                return mid;
            }
        }

        if(nums1[list[low][0]]+nums2[list[low][1]] > sum){
            return low;
        }else if(nums1[list[low][0]]+nums2[list[low][1]] == sum){
            return low+1;
        }else if(nums1[list[high][0]]+nums2[list[high][1]] > sum){
            return high;
        }else if(nums1[list[high][0]]+nums2[list[high][1]] == sum){
            return high+1;
        }else{
            return high+1;
        }
    }
}
