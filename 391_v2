public class Solution {
    public bool IsRectangleCover(int[,] rectangles) {
        int rows = rectangles.GetLength(0);
        int min_x = int.MaxValue;
        int max_x = int.MinValue;
        int min_y = int.MaxValue;
        int max_y = int.MinValue;

        var mapping = new HashSet<string>();

        int r = 0;
        for(int i = 0;i<rows;i++){
            min_x = Math.Min(rectangles[i,0],min_x);
            max_x = Math.Max(rectangles[i,2],max_x);
            min_y = Math.Min(rectangles[i,1],min_y);
            max_y = Math.Max(rectangles[i,3],max_y);
            r+= (rectangles[i,0]-rectangles[i,2])*(rectangles[i,1]-rectangles[i,3]);

            if(!mapping.Add(rectangles[i,0]+","+rectangles[i,1]))
                mapping.Remove(rectangles[i,0]+","+rectangles[i,1]);
            if(!mapping.Add(rectangles[i,0]+","+rectangles[i,3]))
                mapping.Remove(rectangles[i,0]+","+rectangles[i,3]);
            if(!mapping.Add(rectangles[i,2]+","+rectangles[i,1]))
                mapping.Remove(rectangles[i,2]+","+rectangles[i,1]);
            if(!mapping.Add(rectangles[i,2]+","+rectangles[i,3]))
                mapping.Remove(rectangles[i,2]+","+rectangles[i,3]);

        }

        if(!mapping.Contains(min_x+","+min_y)
        || !mapping.Contains(min_x+","+max_y)
        || !mapping.Contains(max_x+","+min_y)
        || !mapping.Contains(max_x+","+max_y)
        || mapping.Count != 4)
            return false;

        return r==(min_x-max_x)*(min_y-max_y);
    }
}
