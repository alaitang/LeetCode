public class Solution {
    public void SolveSudoku(char[,] board) {
        var rows = new int[9];
        var cols = new int[9];
        var blocks = new int[9];

        for(int i = 0;i<9;i++){
            for(int j = 0;j<9;j++){
                if(board[i,j] != '.'){
                    int ii = board[i,j]-'0';
                    rows[i] += (1 << ii);
                    cols[j] += (1 << ii);
                    blocks[i/3*3+j/3] += (1 << ii);
                }
            }
        }

        Helper(board,rows,cols,blocks,0,0);
    }

    private bool Helper(char[,] board,int[] rows,int[] cols,int[] blocks,int i,int j){
        if(i == 9)
            return true;
        if(board[i,j] == '.'){
            for(int ii = 1 ;ii <=9;ii++){
                //Console.WriteLine(1 << ii);
                if((rows[i] | (1 << ii)) == rows[i] || (cols[j] | (1 << ii)) == cols[j]
                || (blocks[i/3*3+j/3] | (1 << ii)) == blocks[i/3*3+j/3])
                    continue;

                board[i,j] = (char)('0'+ii);
                rows[i] += (1 << ii);
                cols[j] += (1 << ii);
                blocks[i/3*3+j/3] += (1 << ii);
                int next_i = i;
                int next_j = j+1;
                if(next_j == 9)
                {
                    next_i++;
                    next_j = 0;
                }


                if(Helper(board,rows,cols,blocks,next_i,next_j)){
                    return true;
                }

                board[i,j] = '.';
                rows[i] -= (1 << ii);
                cols[j] -= (1 << ii);
                blocks[i/3*3+j/3] -= (1 << ii);
            }
            return false;
        }
        j++;
        if(j == 9)
        {
            i++;
            j = 0;
        }
        return Helper(board,rows,cols,blocks,i,j);
    }
}
