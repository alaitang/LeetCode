public class Solution {
    public IList<string> GeneratePalindromes(string s) {
        var mapping = new Dictionary<char,int>();
        int k = 0;
        foreach(var c in s){
            if(!mapping.ContainsKey(c))
                mapping.Add(c,0);
            if(++mapping[c] % 2 == 0)
                k--;
            else
                k++;
        }
        if(k > 1)
            return new List<string>();

        string str = "";
        string mid = "";
        foreach(var item in mapping){
            str += "".PadRight(item.Value/2,item.Key);
            if(item.Value % 2 == 1){
                mid += item.Key;
            }
        }

        var arr = str.ToCharArray();
        Array.Sort(arr);
        int len = arr.Length;
        var result = new List<string>();
        result.Add(new string(arr)+mid + new string(arr.Reverse().ToArray()));
        while(true){
            int i = len-1;
            while(i > 0){

                if(arr[i] > arr[i-1])
                    break;

                i--;
            }

            if(i <= 0)
                break;

            int j = len-1;
            while(j > i-1){
                if(arr[j] > arr[i-1])
                    break;
                j--;
            }
            swap(arr,j,i-1);
            j = len-1;

            while(i < j){
                swap(arr,i++,j--);
            }

            result.Add(new string(arr)+mid + new string(arr.Reverse().ToArray()));
        }
        return result;
    }

    private void swap(char[] arr,int i,int j){
        char c = arr[i];
        arr[i] = arr[j];
        arr[j] = c;
    }
}
