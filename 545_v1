/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<int> BoundaryOfBinaryTree(TreeNode root) {
        var result = new List<int>();
        if(root == null)
            return result;
        else if(root.left == null && root.right == null)
            return new List<int>(){root.val};

        result.Add(root.val);
        var current = root.left;

        while(current != null){
            if(current.left != null || current.right != null){
                result.Add(current.val);
            }

            if(current.left != null)
                current = current.left;
            else
                current = current.right;
        }


        var stack = new Stack<TreeNode>();
        stack.Push(root);
        while(stack.Any()){
            var top = stack.Pop();
            if(top.left == null && top.right == null)
                result.Add(top.val);

            if(top.right != null)
                stack.Push(top.right);

            if(top.left != null)
                stack.Push(top.left);
        }


        int index = result.Count();

        current = root.right;

        while(current != null){
            if(current.left != null || current.right != null){
                result.Insert(index,current.val);
            }

            if(current.right != null)
                current = current.right;
            else
                current = current.left;
        }

        return result;

    }
}
