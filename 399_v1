public class Solution {
    public double[] CalcEquation(string[,] equations, double[] values, string[,] queries) {
        var mapping = new Dictionary<string,double>();
        var m1 = new Dictionary<string,HashSet<string>>();
        int rows = equations.GetLength(0);
        for(int i = 0;i<rows;i++){
           var key = equations[i,0]+"/"+equations[i,1];
           if(!mapping.ContainsKey(key)){
                mapping.Add(key,values[i]);

                if(!m1.ContainsKey(equations[i,0]))
                    m1.Add(equations[i,0],new HashSet<string>());

                m1[equations[i,0]].Add(equations[i,1]);
           }


            if(values[i] != 0){
                key = equations[i,1]+"/"+equations[i,0];
                if(!mapping.ContainsKey(key)){
                    mapping.Add(key,1/values[i]);
                    if(!m1.ContainsKey(equations[i,1]))
                        m1.Add(equations[i,1],new HashSet<string>());

                    m1[equations[i,1]].Add(equations[i,0]);
                }
            }
        }
        int len = queries.GetLength(0);
        var result = new double[len];
        for(int i = 0;i<len;i++){
            result[i] = Helper(queries[i,0],queries[i,1],1.0,mapping,m1,new HashSet<string>());
        }
        return result;
    }

    private double Helper(string start,string end,double d,Dictionary<string,double> mapping,Dictionary<string,HashSet<string>> m1,HashSet<string> visited){

        if(!m1.ContainsKey(start))
            return -1;

        foreach(var item in m1[start]){
            if(item == end){
                return d*mapping[start+"/"+end];
            }
            if(visited.Add(item)){
                var r = Helper(item,end,d*mapping[start+"/"+item],mapping,m1,visited);
                if(r != -1)
                    return r;
                visited.Remove(item);
            }
        }
        return -1;
    }
}
