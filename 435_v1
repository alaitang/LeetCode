/**
 * Definition for an interval.
 * public class Interval {
 *     public int start;
 *     public int end;
 *     public Interval() { start = 0; end = 0; }
 *     public Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int EraseOverlapIntervals(Interval[] intervals) {
        intervals = intervals.OrderBy(x=>x.start).ToArray();
        int len = intervals.Length;
        var dp = new int[len];

        int result = 0;

        for(int i = 0;i<len;i++){
            dp[i] = 1;
            for(int j = i-1;j>=0;j--){
                if(intervals[j].end <= intervals[i].start){
                    dp[i] = Math.Max(dp[i],dp[j]+1);
                }
            }
            result = Math.Max(result,dp[i]);
        }

        return len-result;
    }
}
