/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        if(head == null || head.next == null || head.next.next == null)
            return null;

        var slow = head.next;
        var fast = head.next.next;

        while(fast != null && slow != fast ){
            if(fast.next == null || fast.next.next == null)
                return null;

            fast = fast.next.next;
            slow = slow.next;
        }

        slow = head;
        while(slow != fast){
            slow = slow.next;
            fast = fast.next;
        }

        return slow;
    }
}
