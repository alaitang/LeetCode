public class Solution {
    public int LargestRectangleArea(int[] heights) {
        int len = heights.Length;

        int[] dpLeft = new int[len];
        int[] dpRight = new int[len];
        for(int i=0;i<len;i++){

            dpLeft[i] = Helper(dpLeft,heights,i-1,i,-1,len);
        }

        for(int i=len-1;i>=0;i--){
            dpRight[i] = Helper(dpRight,heights,i+1,i,1,len);
        }

        int result = 0;
        for(int i = 0;i<len;i++){
            result = Math.Max(heights[i]*(dpRight[i]-dpLeft[i]+1),result);
        }
        return result;
    }

    private int Helper(int[] dp,int[] heights,int i,int j,int add,int len){

        if(i == -1 || i == 0 && add == -1 && heights[i] >= heights[j]){
            return 0;
        }else if(i == len || i == len-1 && add == 1 && heights[i] >= heights[j]){
            return len-1;
        }else if(heights[i] == heights[j]){
            return dp[i];
        }else if(heights[i] < heights[j]){
            return i-add;
        }else {
            var next = dp[i];

            if(next == i || heights[next] >= heights[j]){
                next +=add;
            }
            return Helper(dp,heights,next,j,add,len);
        }
    }
}
